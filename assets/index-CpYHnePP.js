var w=Object.defineProperty;var x=(p,t,i)=>t in p?w(p,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):p[t]=i;var r=(p,t,i)=>x(p,typeof t!="symbol"?t+"":t,i);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))e(n);new MutationObserver(n=>{for(const o of n)if(o.type==="childList")for(const s of o.addedNodes)s.tagName==="LINK"&&s.rel==="modulepreload"&&e(s)}).observe(document,{childList:!0,subtree:!0});function i(n){const o={};return n.integrity&&(o.integrity=n.integrity),n.referrerPolicy&&(o.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?o.credentials="include":n.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function e(n){if(n.ep)return;n.ep=!0;const o=i(n);fetch(n.href,o)}})();class k{constructor(t,i,e){r(this,"x");r(this,"y");r(this,"z");r(this,"edges");this.x=t,this.y=i,this.z=e,this.edges=new Set}}class S{constructor(t,i){r(this,"interface");r(this,"canvas");r(this,"ctx");r(this,"centerX");r(this,"centerY");r(this,"mouseIsDown");r(this,"isInterfaceOpen");r(this,"isLoading");r(this,"frame");r(this,"options");r(this,"sphereRadius");r(this,"nodes");r(this,"n");r(this,"iterations");r(this,"start",t=>{this.nodes=[],this.generateRandomNodes(),t?this.gravitate(1e3,1e4):this.frame=window.requestAnimationFrame(()=>this.init(1e3,1e5,this.iterations))});r(this,"init",(t,i,e)=>{if(this.adjustForGravity(t,i),this.calcEdges(),this.render(),e<0){window.cancelAnimationFrame(this.frame);return}e--,this.frame=window.requestAnimationFrame(()=>this.init(t,i,e--))});r(this,"gravitate",(t,i)=>{for(let e=0;e<this.iterations;e++)this.adjustForGravity(t,i);this.calcEdges(),this.render()});r(this,"calcEdges",()=>{const t=new Map,i=new Set;let e=1/0;for(let o=0;o<this.n;o++)for(let s=0;s<this.n;s++){if(o===s)continue;const a=[o,s].sort((d,u)=>d-u).join("-");if(i.has(a))continue;const c=this.nodes[o],l=this.nodes[s],h=+this.distanceFormula(c.x,c.y,c.z,l.x,l.y,l.z).toFixed(5);e=Math.min(e,h),h<e*Math.sqrt(1.9)&&t.set(a,h),i.add(a)}const n=e*Math.sqrt(1.9);for(const o of t.keys()){const[s,a]=o.split("-");t.get(o)<n?(this.nodes[+s].edges.add(o),this.nodes[+a].edges.add(o)):(this.nodes[+s].edges.delete(o),this.nodes[+a].edges.delete(o))}});r(this,"generateRandomNodes",()=>{this.nodes=[];for(let t=0;t<this.n;t++)this.nodes.push(this.generateRandomNode())});r(this,"generateRandomNode",()=>{const t=Math.random()-.5,i=Math.random()-.5,e=Math.random()-.5,{x:n,y:o,z:s}=this.projectNodeToSphere(t,i,e);return new k(n,o,s)});r(this,"adjustForGravity",(t,i)=>{for(let e=0;e<this.n;e++){let n=0,o=0,s=0;const a=this.nodes[e];for(let d=0;d<this.n;d++){if(e===d)continue;const u=this.nodes[d],f=a.x-u.x,m=a.y-u.y,y=a.z-u.z,v=Math.sqrt(f**2+m**2+y**2);if(v<i){const g=t*1/v;n+=g*f,o+=g*m,s+=g*y}}const{x:c,y:l,z:h}=this.projectNodeToSphere(a.x+n,a.y+o,a.z+s);a.x=c,a.y=l,a.z=h}});r(this,"render",()=>{this.clearCanvas();const t=new Set,i=[],e=[],n=[],o=[];for(let s=0;s<this.nodes.length;s++){const a=this.nodes[s];a.z>0?n.push(a):o.push(a);for(const c of a.edges){if(t.has(c))continue;const[l,h]=c.split("-"),{x:d,y:u,z:f}=this.nodes[+l],{x:m,y,z:v}=this.nodes[+h];(f+v)/2>=0?i.push([d,u,f,m,y,v]):e.push([d,u,f,m,y,v]),t.add(c)}}for(const s of o)this.drawNode(s);for(const s of e)this.drawEdge(s[0],s[1],s[2],s[3],s[4],s[5]);for(const s of i)this.drawEdge(s[0],s[1],s[2],s[3],s[4],s[5],!0);for(const s of n)this.drawNode(s,!0)});r(this,"distanceFormula",(t,i,e,n,o,s)=>Math.sqrt((n-t)**2+(o-i)**2+(s-e)**2));r(this,"projectNodeToSphere",(t,i,e)=>{const n=this.distanceFormula(t,i,e,0,0,0);return{x:t/n,y:i/n,z:e/n}});r(this,"d",(t,i,e=!1)=>{const n=this.sphereRadius;return t*(1+i*n/4e3)*n+(e?this.centerX:this.centerY)});r(this,"drawNode",(t,i=!1)=>{this.ctx.beginPath(),this.ctx.arc(this.d(t.x,t.z,!0),this.d(t.y,t.z),this.options.pointSize,0,2*Math.PI),this.ctx.fillStyle=i?this.options.pointColor:this.options.backPointColor,this.ctx.fill()});r(this,"drawEdge",(t,i,e,n,o,s,a=!1)=>{const c=this.d(t,e,!0),l=this.d(i,e),h=this.d(n,s,!0),d=this.d(o,s);this.ctx.beginPath(),this.ctx.moveTo(c,l),this.ctx.lineTo(h,d),this.ctx.lineWidth=this.options.edgeWidth,this.ctx.strokeStyle=a?this.options.edgeColor:this.options.edgeBackColor,this.ctx.stroke()});r(this,"clearCanvas",()=>{this.ctx.fillStyle=this.options.clear,this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height)});r(this,"calculateRotatedCoordinates",(t,i,e,n,o,s,a)=>{const c=Math.sin(a*n),l=Math.cos(a*n),h=-Math.sin(a*o),d=Math.cos(a*o),u=Math.sin(a*s),f=Math.cos(a*s),m=t*f*l+i*f*c*h-i*u*d+e*f*c*d+e*u*h,y=t*u*l+i*u*c*h+i*f*d+e*u*c*d-e*f*h,v=-t*c+i*l*h+e*l*d;return{x:m,y,z:v}});r(this,"generateEventListeners",()=>{document.addEventListener("mouseup",()=>{this.mouseIsDown=!1}),this.canvas.addEventListener("mousedown",()=>{this.mouseIsDown=!0}),this.canvas.addEventListener("mousemove",t=>{this.mouseIsDown&&this.rotate(t.movementX,t.movementY)}),this.interface.addEventListener("click",t=>{t.stopPropagation()}),this.interface.getElementsByClassName("point-pack-toggle-user-interface")[0].addEventListener("click",()=>{this.isInterfaceOpen=!this.isInterfaceOpen,this.interface.querySelectorAll(".pkui-display")[0].style.display=this.isInterfaceOpen?"block":"none"}),this.interface.querySelectorAll(".pkui-submit")[0].addEventListener("click",t=>{t.preventDefault();const i=this.interface.querySelectorAll(".pkui-vertices")[0].value,e=this.interface.querySelectorAll(".pkui-iterations")[0].value;Number.isNaN(+i)||Number.isNaN(+e)||(this.interface.querySelectorAll(".pkui-submit")[0].disabled=!0,this.n=+i,this.iterations=+e,setTimeout(()=>{this.start(!this.interface.querySelectorAll(".pkui-render-steps")[0].checked),this.interface.querySelectorAll(".pkui-submit")[0].disabled=!1},10))})});r(this,"rotate",(t,i)=>{this.nodes.forEach(e=>{const{x:n,y:o,z:s}=this.calculateRotatedCoordinates(e.x,e.y,e.z,t,i,0,.002);e.x=n,e.y=o,e.z=s}),this.render()});if(i.length<5)throw new Error("id must be at least five characters");this.n=Math.floor(Math.random()*17)+3,this.iterations=1e4,t.innerHTML=t.innerHTML+`
      <div class="point-pack-container" id="${i}">
        <canvas class="point-pack-canvas" id="${i}-canvas"></canvas>
        <div class="point-pack-user-interface-container" id="${i}-interface">
          <button class="point-pack-toggle-user-interface">Show/Hide</button>
          <form class="pkui-display">
            <div>
              <p>Vertices:</p>
              <input class="pkui-input pkui-vertices" type="text" placeholder="Vertex count..." value="${this.n}"></input>
            </div>
            <div>
              <p>Steps:</p>
              <input class="pkui-input pkui-iterations" type="text" placeholder="Step count..." value="${this.iterations}"></input>
            </div>
            <div>
              <input class="pkui-render-steps" checked type="checkbox"></input>
              <p>Render Steps (slow)</p>
            </div>
            <div>
              <input class="pkui-submit" type="submit" value="Start"></input>
            </div>
          </form>
        </div>
      </div>
    `,this.canvas=document.querySelector("#"+i+"-canvas"),this.interface=document.querySelector("#"+i+"-interface");const e=t.clientWidth,n=t.clientHeight;this.centerX=e/2,this.centerY=n/2,this.sphereRadius=.95*(Math.min(e,n,1e3)/2),this.canvas.width=e,this.canvas.height=n,this.frame=0,window.addEventListener("resize",()=>{const o=t.clientWidth,s=t.clientHeight;this.centerX=o/2,this.centerY=s/2,this.canvas.width=o,this.canvas.height=s,this.sphereRadius=.95*(Math.min(o,s,1e3)/2),this.render()}),this.ctx=this.canvas.getContext("2d"),this.mouseIsDown=!1,this.isInterfaceOpen=!0,this.isLoading=!1,this.options={clear:"black",pointColor:"#d90000",backPointColor:"#590000",edgeColor:"#dddddd",edgeBackColor:"#555555",edgeWidth:4,pointSize:8},this.nodes=[],this.generateEventListeners(),this.start(!1)}}new S(document.querySelector("#app"),"point-pack-1");
