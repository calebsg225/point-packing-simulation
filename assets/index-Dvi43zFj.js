var w=Object.defineProperty;var x=(f,t,s)=>t in f?w(f,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):f[t]=s;var r=(f,t,s)=>x(f,typeof t!="symbol"?t+"":t,s);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))e(o);new MutationObserver(o=>{for(const n of o)if(n.type==="childList")for(const i of n.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&e(i)}).observe(document,{childList:!0,subtree:!0});function s(o){const n={};return o.integrity&&(n.integrity=o.integrity),o.referrerPolicy&&(n.referrerPolicy=o.referrerPolicy),o.crossOrigin==="use-credentials"?n.credentials="include":o.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function e(o){if(o.ep)return;o.ep=!0;const n=s(o);fetch(o.href,n)}})();class k{constructor(t,s,e){r(this,"x");r(this,"y");r(this,"z");r(this,"edges");this.x=t,this.y=s,this.z=e,this.edges=[]}}class M{constructor(t,s){r(this,"interface");r(this,"canvas");r(this,"ctx");r(this,"centerX");r(this,"centerY");r(this,"mouseIsDown");r(this,"isInterfaceOpen");r(this,"isLoading");r(this,"options");r(this,"sphereRadius");r(this,"nodes");r(this,"n");r(this,"iterations");r(this,"start",()=>{this.nodes=[],this.generateRandomNodes(),this.gravitate(1e3,1e4)});r(this,"init",(t,s,e)=>{this.adjustForGravity(t,s),this.render(),window.requestAnimationFrame(()=>this.init(t,s,e))});r(this,"gravitate",(t,s)=>{for(let e=0;e<this.iterations;e++)this.adjustForGravity(t,s);this.calcEdges(),this.render()});r(this,"calcEdges",()=>{const t=new Map,s=new Set;let e=1/0;for(let n=0;n<this.n;n++)for(let i=0;i<this.n;i++){if(n===i)continue;const c=[n,i].sort((h,d)=>h-d).join("-");if(s.has(c))continue;const a=this.nodes[n],u=this.nodes[i],l=+this.distanceFormula(a.x,a.y,a.z,u.x,u.y,u.z).toFixed(5);e=Math.min(e,l),l<e*Math.sqrt(1.9)&&t.set(c,l),s.add(c)}const o=e*Math.sqrt(1.9);for(const n of t.keys())if(t.get(n)<o){const[i,c]=n.split("-");this.nodes[+i].edges.push(n),this.nodes[+c].edges.push(n)}});r(this,"generateRandomNodes",()=>{this.nodes=[];for(let t=0;t<this.n;t++)this.nodes.push(this.generateRandomNode())});r(this,"generateRandomNode",()=>{const t=Math.random()-.5,s=Math.random()-.5,e=Math.random()-.5,{x:o,y:n,z:i}=this.projectNodeToSphere(t,s,e);return new k(o,n,i)});r(this,"adjustForGravity",(t,s)=>{for(let e=0;e<this.n;e++){let o=0,n=0,i=0;const c=this.nodes[e];for(let h=0;h<this.n;h++){if(e===h)continue;const d=this.nodes[h],p=c.x-d.x,v=c.y-d.y,m=c.z-d.z,y=Math.sqrt(p**2+v**2+m**2);if(y<s){const g=t*1/y;o+=g*p,n+=g*v,i+=g*m}}const{x:a,y:u,z:l}=this.projectNodeToSphere(c.x+o,c.y+n,c.z+i);c.x=a,c.y=u,c.z=l}});r(this,"render",()=>{this.clearCanvas();const t=new Set,s=[],e=[],o=[],n=[];for(let i=0;i<this.nodes.length;i++){const c=this.nodes[i];c.z>0?o.push(c):n.push(c);for(const a of c.edges){if(t.has(a))continue;const[u,l]=a.split("-"),{x:h,y:d,z:p}=this.nodes[+u],{x:v,y:m,z:y}=this.nodes[+l];(p+y)/2>=0?s.push([h,d,v,m]):e.push([h,d,v,m]),t.add(a)}}for(const i of n)this.drawNode(i);for(const i of e)this.drawEdge(i[0],i[1],i[2],i[3]);for(const i of s)this.drawEdge(i[0],i[1],i[2],i[3],!0);for(const i of o)this.drawNode(i,!0)});r(this,"distanceFormula",(t,s,e,o,n,i)=>Math.sqrt((o-t)**2+(n-s)**2+(i-e)**2));r(this,"projectNodeToSphere",(t,s,e)=>{const o=this.distanceFormula(t,s,e,0,0,0);return{x:t/o,y:s/o,z:e/o}});r(this,"drawNode",(t,s=!1)=>{const e=this.sphereRadius;this.ctx.beginPath(),this.ctx.arc(t.x*e+this.centerX,t.y*e+this.centerY,this.options.pointSize,0,2*Math.PI),this.ctx.fillStyle=s?this.options.pointColor:this.options.backPointColor,this.ctx.fill()});r(this,"drawEdge",(t,s,e,o,n=!1)=>{const i=this.sphereRadius;this.ctx.beginPath(),this.ctx.moveTo(t*i+this.centerX,s*i+this.centerY),this.ctx.lineTo(e*i+this.centerX,o*i+this.centerY),this.ctx.lineWidth=this.options.edgeWidth,this.ctx.strokeStyle=n?this.options.edgeColor:this.options.edgeBackColor,this.ctx.stroke()});r(this,"clearCanvas",()=>{this.ctx.fillStyle=this.options.clear,this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height)});r(this,"calculateRotatedCoordinates",(t,s,e,o,n,i,c)=>{const a=Math.sin(c*o),u=Math.cos(c*o),l=-Math.sin(c*n),h=Math.cos(c*n),d=Math.sin(c*i),p=Math.cos(c*i),v=t*p*u+s*p*a*l-s*d*h+e*p*a*h+e*d*l,m=t*d*u+s*d*a*l+s*p*h+e*d*a*h-e*p*l,y=-t*a+s*u*l+e*u*h;return{x:v,y:m,z:y}});r(this,"generateEventListeners",()=>{document.addEventListener("mouseup",()=>{this.mouseIsDown=!1}),this.canvas.addEventListener("mousedown",()=>{this.mouseIsDown=!0}),this.canvas.addEventListener("mousemove",t=>{this.mouseIsDown&&this.rotate(t.movementX,t.movementY)}),this.interface.addEventListener("click",t=>{t.stopPropagation()}),this.interface.getElementsByClassName("point-pack-toggle-user-interface")[0].addEventListener("click",()=>{this.isInterfaceOpen=!this.isInterfaceOpen,this.interface.querySelectorAll(".pkui-display")[0].style.display=this.isInterfaceOpen?"block":"none"}),this.interface.querySelectorAll(".pkui-submit")[0].addEventListener("click",t=>{t.preventDefault();const s=this.interface.querySelectorAll(".pkui-vertices")[0].value,e=this.interface.querySelectorAll(".pkui-iterations")[0].value;Number.isNaN(+s)||Number.isNaN(+e)||(this.interface.querySelectorAll(".pkui-submit")[0].disabled=!0,this.n=+s,this.iterations=+e,setTimeout(()=>{this.start(),this.interface.querySelectorAll(".pkui-submit")[0].disabled=!1},10))})});r(this,"rotate",(t,s)=>{this.nodes.forEach(e=>{const{x:o,y:n,z:i}=this.calculateRotatedCoordinates(e.x,e.y,e.z,t,s,0,.002);e.x=o,e.y=n,e.z=i}),this.render()});if(s.length<5)throw new Error("id must be at least five characters");this.n=Math.floor(Math.random()*17)+3,this.iterations=1e4,t.innerHTML=t.innerHTML+`
      <div class="point-pack-container" id="${s}">
        <canvas class="point-pack-canvas" id="${s}-canvas"></canvas>
        <div class="point-pack-user-interface-container" id="${s}-interface">
          <button class="point-pack-toggle-user-interface">Show/Hide</button>
          <form class="pkui-display">
            <div>
              <p>Vertices:</p>
              <input class="pkui-input pkui-vertices" type="text" placeholder="vertex count..." value="${this.n}"></input>
            </div>
            <div>
              <p>Iterations:</p>
              <input class="pkui-input pkui-iterations" type="text" placeholder="iteration count..." value="${this.iterations}"></input>
            </div>
            <div>
              <input class="pkui-submit" type="submit" value="Start"></input>
            </div>
          </form>
        </div>
      </div>
    `,this.canvas=document.querySelector("#"+s+"-canvas"),this.interface=document.querySelector("#"+s+"-interface");const e=t.clientWidth,o=t.clientHeight;this.centerX=e/2,this.centerY=o/2,this.sphereRadius=.95*(Math.min(e,o,1e3)/2),this.canvas.width=e,this.canvas.height=o,window.addEventListener("resize",()=>{const n=t.clientWidth,i=t.clientHeight;this.centerX=n/2,this.centerY=i/2,this.canvas.width=n,this.canvas.height=i,this.sphereRadius=.95*(Math.min(n,i,1e3)/2),this.render()}),this.ctx=this.canvas.getContext("2d"),this.mouseIsDown=!1,this.isInterfaceOpen=!0,this.isLoading=!1,this.options={clear:"black",pointColor:"#d90000",backPointColor:"#590000",edgeColor:"#dddddd",edgeBackColor:"#555555",edgeWidth:4,pointSize:8},this.nodes=[],this.generateEventListeners(),this.start()}}new M(document.querySelector("#app"),"point-pack-1");
