var x=Object.defineProperty;var w=(p,t,s)=>t in p?x(p,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):p[t]=s;var r=(p,t,s)=>w(p,typeof t!="symbol"?t+"":t,s);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))e(n);new MutationObserver(n=>{for(const o of n)if(o.type==="childList")for(const i of o.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&e(i)}).observe(document,{childList:!0,subtree:!0});function s(n){const o={};return n.integrity&&(o.integrity=n.integrity),n.referrerPolicy&&(o.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?o.credentials="include":n.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function e(n){if(n.ep)return;n.ep=!0;const o=s(n);fetch(n.href,o)}})();class k{constructor(t,s,e){r(this,"x");r(this,"y");r(this,"z");r(this,"edges");this.x=t,this.y=s,this.z=e,this.edges=[]}}class M{constructor(t,s){r(this,"interface");r(this,"canvas");r(this,"ctx");r(this,"centerX");r(this,"centerY");r(this,"mouseIsDown");r(this,"isInterfaceOpen");r(this,"isLoading");r(this,"options");r(this,"sphereRadius");r(this,"nodes");r(this,"n");r(this,"iterations");r(this,"start",()=>{this.nodes=[],this.generateRandomNodes(),this.gravitate(1e3,1e4)});r(this,"init",(t,s,e)=>{this.adjustForGravity(t,s),this.render(),window.requestAnimationFrame(()=>this.init(t,s,e))});r(this,"gravitate",(t,s)=>{for(let e=0;e<this.iterations;e++)this.adjustForGravity(t,s);this.calcEdges(),this.render()});r(this,"calcEdges",()=>{const t=new Map,s=new Set;let e=1/0;for(let o=0;o<this.n;o++)for(let i=0;i<this.n;i++){if(o===i)continue;const c=[o,i].sort((h,u)=>h-u).join("-");if(s.has(c))continue;const a=this.nodes[o],l=this.nodes[i],d=+this.distanceFormula(a.x,a.y,a.z,l.x,l.y,l.z).toFixed(5);e=Math.min(e,d),d<e*Math.sqrt(1.9)&&t.set(c,d),s.add(c)}const n=e*Math.sqrt(1.9);for(const o of t.keys())if(t.get(o)<n){const[i,c]=o.split("-");this.nodes[+i].edges.push(o),this.nodes[+c].edges.push(o)}});r(this,"generateRandomNodes",()=>{this.nodes=[];for(let t=0;t<this.n;t++)this.nodes.push(this.generateRandomNode())});r(this,"generateRandomNode",()=>{const t=Math.random()-.5,s=Math.random()-.5,e=Math.random()-.5,{x:n,y:o,z:i}=this.projectNodeToSphere(t,s,e);return new k(n,o,i)});r(this,"adjustForGravity",(t,s)=>{for(let e=0;e<this.n;e++){let n=0,o=0,i=0;const c=this.nodes[e];for(let h=0;h<this.n;h++){if(e===h)continue;const u=this.nodes[h],f=c.x-u.x,y=c.y-u.y,m=c.z-u.z,v=Math.sqrt(f**2+y**2+m**2);if(v<s){const g=t*1/v;n+=g*f,o+=g*y,i+=g*m}}const{x:a,y:l,z:d}=this.projectNodeToSphere(c.x+n,c.y+o,c.z+i);c.x=a,c.y=l,c.z=d}});r(this,"render",()=>{this.clearCanvas();const t=new Set,s=[],e=[],n=[],o=[];for(let i=0;i<this.nodes.length;i++){const c=this.nodes[i];c.z>0?n.push(c):o.push(c);for(const a of c.edges){if(t.has(a))continue;const[l,d]=a.split("-"),{x:h,y:u,z:f}=this.nodes[+l],{x:y,y:m,z:v}=this.nodes[+d];(f+v)/2>=0?s.push([h,u,f,y,m,v]):e.push([h,u,f,y,m,v]),t.add(a)}}for(const i of o)this.drawNode(i);for(const i of e)this.drawEdge(i[0],i[1],i[2],i[3],i[4],i[5]);for(const i of s)this.drawEdge(i[0],i[1],i[2],i[3],i[4],i[5],!0);for(const i of n)this.drawNode(i,!0)});r(this,"distanceFormula",(t,s,e,n,o,i)=>Math.sqrt((n-t)**2+(o-s)**2+(i-e)**2));r(this,"projectNodeToSphere",(t,s,e)=>{const n=this.distanceFormula(t,s,e,0,0,0);return{x:t/n,y:s/n,z:e/n}});r(this,"d",(t,s,e=!1)=>{const n=this.sphereRadius;return t*(1+s*n/4e3)*n+(e?this.centerX:this.centerY)});r(this,"drawNode",(t,s=!1)=>{this.ctx.beginPath(),this.ctx.arc(this.d(t.x,t.z,!0),this.d(t.y,t.z),this.options.pointSize,0,2*Math.PI),this.ctx.fillStyle=s?this.options.pointColor:this.options.backPointColor,this.ctx.fill()});r(this,"drawEdge",(t,s,e,n,o,i,c=!1)=>{const a=this.d(t,e,!0),l=this.d(s,e),d=this.d(n,i,!0),h=this.d(o,i);this.ctx.beginPath(),this.ctx.moveTo(a,l),this.ctx.lineTo(d,h),this.ctx.lineWidth=this.options.edgeWidth,this.ctx.strokeStyle=c?this.options.edgeColor:this.options.edgeBackColor,this.ctx.stroke()});r(this,"clearCanvas",()=>{this.ctx.fillStyle=this.options.clear,this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height)});r(this,"calculateRotatedCoordinates",(t,s,e,n,o,i,c)=>{const a=Math.sin(c*n),l=Math.cos(c*n),d=-Math.sin(c*o),h=Math.cos(c*o),u=Math.sin(c*i),f=Math.cos(c*i),y=t*f*l+s*f*a*d-s*u*h+e*f*a*h+e*u*d,m=t*u*l+s*u*a*d+s*f*h+e*u*a*h-e*f*d,v=-t*a+s*l*d+e*l*h;return{x:y,y:m,z:v}});r(this,"generateEventListeners",()=>{document.addEventListener("mouseup",()=>{this.mouseIsDown=!1}),this.canvas.addEventListener("mousedown",()=>{this.mouseIsDown=!0}),this.canvas.addEventListener("mousemove",t=>{this.mouseIsDown&&this.rotate(t.movementX,t.movementY)}),this.interface.addEventListener("click",t=>{t.stopPropagation()}),this.interface.getElementsByClassName("point-pack-toggle-user-interface")[0].addEventListener("click",()=>{this.isInterfaceOpen=!this.isInterfaceOpen,this.interface.querySelectorAll(".pkui-display")[0].style.display=this.isInterfaceOpen?"block":"none"}),this.interface.querySelectorAll(".pkui-submit")[0].addEventListener("click",t=>{t.preventDefault();const s=this.interface.querySelectorAll(".pkui-vertices")[0].value,e=this.interface.querySelectorAll(".pkui-iterations")[0].value;Number.isNaN(+s)||Number.isNaN(+e)||(this.interface.querySelectorAll(".pkui-submit")[0].disabled=!0,this.n=+s,this.iterations=+e,setTimeout(()=>{this.start(),this.interface.querySelectorAll(".pkui-submit")[0].disabled=!1},10))})});r(this,"rotate",(t,s)=>{this.nodes.forEach(e=>{const{x:n,y:o,z:i}=this.calculateRotatedCoordinates(e.x,e.y,e.z,t,s,0,.002);e.x=n,e.y=o,e.z=i}),this.render()});if(s.length<5)throw new Error("id must be at least five characters");this.n=Math.floor(Math.random()*17)+3,this.iterations=1e4,t.innerHTML=t.innerHTML+`
      <div class="point-pack-container" id="${s}">
        <canvas class="point-pack-canvas" id="${s}-canvas"></canvas>
        <div class="point-pack-user-interface-container" id="${s}-interface">
          <button class="point-pack-toggle-user-interface">Show/Hide</button>
          <form class="pkui-display">
            <div>
              <p>Vertices:</p>
              <input class="pkui-input pkui-vertices" type="text" placeholder="vertex count..." value="${this.n}"></input>
            </div>
            <div>
              <p>Iterations:</p>
              <input class="pkui-input pkui-iterations" type="text" placeholder="iteration count..." value="${this.iterations}"></input>
            </div>
            <div>
              <input class="pkui-submit" type="submit" value="Start"></input>
            </div>
          </form>
        </div>
      </div>
    `,this.canvas=document.querySelector("#"+s+"-canvas"),this.interface=document.querySelector("#"+s+"-interface");const e=t.clientWidth,n=t.clientHeight;this.centerX=e/2,this.centerY=n/2,this.sphereRadius=.95*(Math.min(e,n,1e3)/2),this.canvas.width=e,this.canvas.height=n,window.addEventListener("resize",()=>{const o=t.clientWidth,i=t.clientHeight;this.centerX=o/2,this.centerY=i/2,this.canvas.width=o,this.canvas.height=i,this.sphereRadius=.95*(Math.min(o,i,1e3)/2),this.render()}),this.ctx=this.canvas.getContext("2d"),this.mouseIsDown=!1,this.isInterfaceOpen=!0,this.isLoading=!1,this.options={clear:"black",pointColor:"#d90000",backPointColor:"#590000",edgeColor:"#dddddd",edgeBackColor:"#555555",edgeWidth:4,pointSize:8},this.nodes=[],this.generateEventListeners(),this.start()}}new M(document.querySelector("#app"),"point-pack-1");
