var w=Object.defineProperty;var v=(a,t,e)=>t in a?w(a,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):a[t]=e;var s=(a,t,e)=>v(a,typeof t!="symbol"?t+"":t,e);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))r(i);new MutationObserver(i=>{for(const o of i)if(o.type==="childList")for(const n of o.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&r(n)}).observe(document,{childList:!0,subtree:!0});function e(i){const o={};return i.integrity&&(o.integrity=i.integrity),i.referrerPolicy&&(o.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?o.credentials="include":i.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function r(i){if(i.ep)return;i.ep=!0;const o=e(i);fetch(i.href,o)}})();class N{constructor(t,e,r){s(this,"x");s(this,"y");s(this,"z");this.x=t,this.y=e,this.z=r}}class z{constructor(t,e){s(this,"canvas");s(this,"ctx");s(this,"width");s(this,"height");s(this,"centerX");s(this,"centerY");s(this,"options");s(this,"sphereDiameter");s(this,"nodes");s(this,"n");s(this,"init",(t,e)=>{this.adjustForGravity(t,e),this.render(),window.requestAnimationFrame(()=>this.init(t,e))});s(this,"gravitate",(t,e,r)=>{for(let i=0;i<t;i++)this.adjustForGravity(e,r);this.render()});s(this,"generateRandomNodes",()=>{this.nodes=[];for(let t=0;t<this.n;t++)this.nodes.push(this.generateRandomNode())});s(this,"generateRandomNode",()=>{const t=(Math.random()-.5)*this.sphereDiameter,e=(Math.random()-.5)*this.sphereDiameter,r=(Math.random()-.5)*this.sphereDiameter,{x:i,y:o,z:n}=this.projectNodeToSphere(t,e,r);return new N(i*this.sphereDiameter,o*this.sphereDiameter,n*this.sphereDiameter)});s(this,"adjustForGravity",(t,e)=>{for(let r=0;r<this.n;r++){let i=0,o=0,n=0;const h=this.nodes[r];for(let c=0;c<this.n;c++){if(r===c)continue;const d=this.nodes[c],p=h.x-d.x,u=h.y-d.y,f=h.z-d.z,m=Math.sqrt(p**2+u**2+f**2);if(m<e){const l=t*1/m;i+=l*p,o+=l*u,n+=l*f}}const{x:y,y:g,z:x}=this.projectNodeToSphere(h.x+i,h.y+o,h.z+n);h.x=y*this.sphereDiameter,h.y=g*this.sphereDiameter,h.z=x*this.sphereDiameter}});s(this,"render",()=>{this.clearCanvas();const t=[];for(const e of this.nodes)e.z>0?t.push(e):this.drawNode(e);for(const e of t)this.drawNode(e,!0)});s(this,"distanceFormula",(t,e,r,i,o,n)=>Math.sqrt((i-t)**2+(o-e)**2+(n-r)**2));s(this,"projectNodeToSphere",(t,e,r)=>{const i=this.distanceFormula(t,e,r,0,0,0);return{x:t/i,y:e/i,z:r/i}});s(this,"drawNode",(t,e=!1)=>{this.ctx.beginPath(),this.ctx.arc(t.x+this.centerX,t.y+this.centerY,this.options.pointSize,0,2*Math.PI),this.ctx.fillStyle=e?this.options.pointColor:this.options.backPointColor,this.ctx.fill()});s(this,"clearCanvas",()=>{this.ctx.fillStyle="white",this.ctx.fillRect(0,0,this.width,this.height)});t.innerHTML=t.innerHTML+`
      <canvas class="point-pack-canvas" id="${e}"></canvas>
    `,this.canvas=document.querySelector("#"+e),this.width=1e3,this.height=1e3,this.centerX=this.width/2,this.centerY=this.height/2,this.sphereDiameter=470,this.canvas.width=this.width,this.canvas.height=this.height,this.ctx=this.canvas.getContext("2d"),this.options={pointColor:"black",backPointColor:"#c6c6c6",pointSize:6},this.nodes=[],this.n=12,this.generateRandomNodes(),window.requestAnimationFrame(()=>this.init(800,8e3))}}new z(document.querySelector("#app"),"point-pack-1");
