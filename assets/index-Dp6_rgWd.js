var x=Object.defineProperty;var w=(f,t,e)=>t in f?x(f,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):f[t]=e;var r=(f,t,e)=>w(f,typeof t!="symbol"?t+"":t,e);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))s(o);new MutationObserver(o=>{for(const n of o)if(n.type==="childList")for(const i of n.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&s(i)}).observe(document,{childList:!0,subtree:!0});function e(o){const n={};return o.integrity&&(n.integrity=o.integrity),o.referrerPolicy&&(n.referrerPolicy=o.referrerPolicy),o.crossOrigin==="use-credentials"?n.credentials="include":o.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function s(o){if(o.ep)return;o.ep=!0;const n=e(o);fetch(o.href,n)}})();class k{constructor(t,e,s){r(this,"x");r(this,"y");r(this,"z");r(this,"edges");this.x=t,this.y=e,this.z=s,this.edges=[]}}class S{constructor(t,e){r(this,"interface");r(this,"canvas");r(this,"ctx");r(this,"width");r(this,"height");r(this,"centerX");r(this,"centerY");r(this,"mouseIsDown");r(this,"isInterfaceOpen");r(this,"isLoading");r(this,"options");r(this,"sphereRadius");r(this,"nodes");r(this,"n");r(this,"iterations");r(this,"start",()=>{this.nodes=[],this.generateRandomNodes(),this.gravitate(1e3,1e4)});r(this,"init",(t,e,s)=>{this.adjustForGravity(t,e),this.render(),window.requestAnimationFrame(()=>this.init(t,e,s))});r(this,"gravitate",(t,e)=>{for(let s=0;s<this.iterations;s++)this.adjustForGravity(t,e);this.calcEdges(),this.render()});r(this,"calcEdges",()=>{const t=new Map,e=new Set;let s=1/0;for(let n=0;n<this.n;n++)for(let i=0;i<this.n;i++){if(n===i)continue;const a=[n,i].sort((h,d)=>h-d).join("-");if(e.has(a))continue;const c=this.nodes[n],u=this.nodes[i],l=+this.distanceFormula(c.x,c.y,c.z,u.x,u.y,u.z).toFixed(5);s=Math.min(s,l),l<s*Math.sqrt(1.9)&&t.set(a,l),e.add(a)}const o=s*Math.sqrt(1.9);for(const n of t.keys())if(t.get(n)<o){const[i,a]=n.split("-");this.nodes[+i].edges.push(n),this.nodes[+a].edges.push(n)}});r(this,"generateRandomNodes",()=>{this.nodes=[];for(let t=0;t<this.n;t++)this.nodes.push(this.generateRandomNode())});r(this,"generateRandomNode",()=>{const t=(Math.random()-.5)*this.sphereRadius,e=(Math.random()-.5)*this.sphereRadius,s=(Math.random()-.5)*this.sphereRadius,{x:o,y:n,z:i}=this.projectNodeToSphere(t,e,s);return new k(o*this.sphereRadius,n*this.sphereRadius,i*this.sphereRadius)});r(this,"adjustForGravity",(t,e)=>{for(let s=0;s<this.n;s++){let o=0,n=0,i=0;const a=this.nodes[s];for(let h=0;h<this.n;h++){if(s===h)continue;const d=this.nodes[h],p=a.x-d.x,v=a.y-d.y,m=a.z-d.z,y=Math.sqrt(p**2+v**2+m**2);if(y<e){const g=t*1/y;o+=g*p,n+=g*v,i+=g*m}}const{x:c,y:u,z:l}=this.projectNodeToSphere(a.x+o,a.y+n,a.z+i);a.x=c*this.sphereRadius,a.y=u*this.sphereRadius,a.z=l*this.sphereRadius}});r(this,"render",()=>{this.clearCanvas();const t=new Set,e=[],s=[],o=[],n=[];for(let i=0;i<this.nodes.length;i++){const a=this.nodes[i];a.z>0?o.push(a):n.push(a);for(const c of a.edges){if(t.has(c))continue;const[u,l]=c.split("-"),{x:h,y:d,z:p}=this.nodes[+u],{x:v,y:m,z:y}=this.nodes[+l];(p+y)/2>=0?e.push([h,d,v,m]):s.push([h,d,v,m]),t.add(c)}}for(const i of n)this.drawNode(i);for(const i of s)this.drawEdge(i[0],i[1],i[2],i[3]);for(const i of e)this.drawEdge(i[0],i[1],i[2],i[3],!0);for(const i of o)this.drawNode(i,!0)});r(this,"distanceFormula",(t,e,s,o,n,i)=>Math.sqrt((o-t)**2+(n-e)**2+(i-s)**2));r(this,"projectNodeToSphere",(t,e,s)=>{const o=this.distanceFormula(t,e,s,0,0,0);return{x:t/o,y:e/o,z:s/o}});r(this,"drawNode",(t,e=!1)=>{this.ctx.beginPath(),this.ctx.arc(t.x+this.centerX,t.y+this.centerY,this.options.pointSize,0,2*Math.PI),this.ctx.fillStyle=e?this.options.pointColor:this.options.backPointColor,this.ctx.fill()});r(this,"drawEdge",(t,e,s,o,n=!1)=>{this.ctx.beginPath(),this.ctx.moveTo(t+this.centerX,e+this.centerY),this.ctx.lineTo(s+this.centerX,o+this.centerY),this.ctx.lineWidth=this.options.edgeWidth,this.ctx.strokeStyle=n?this.options.edgeColor:this.options.edgeBackColor,this.ctx.stroke()});r(this,"clearCanvas",()=>{this.ctx.fillStyle=this.options.clear,this.ctx.fillRect(0,0,this.width,this.height)});r(this,"calculateRotatedCoordinates",(t,e,s,o,n,i,a)=>{const c=Math.sin(a*o),u=Math.cos(a*o),l=-Math.sin(a*n),h=Math.cos(a*n),d=Math.sin(a*i),p=Math.cos(a*i),v=t*p*u+e*p*c*l-e*d*h+s*p*c*h+s*d*l,m=t*d*u+e*d*c*l+e*p*h+s*d*c*h-s*p*l,y=-t*c+e*u*l+s*u*h;return{x:v,y:m,z:y}});r(this,"generateEventListeners",()=>{document.addEventListener("mouseup",()=>{this.mouseIsDown=!1}),this.canvas.addEventListener("mousedown",()=>{this.mouseIsDown=!0}),this.canvas.addEventListener("mousemove",t=>{this.mouseIsDown&&this.rotate(t.movementX,t.movementY)}),this.interface.addEventListener("click",t=>{t.stopPropagation()}),this.interface.getElementsByClassName("point-pack-toggle-user-interface")[0].addEventListener("click",()=>{this.isInterfaceOpen=!this.isInterfaceOpen,this.interface.querySelectorAll(".pkui-display")[0].style.display=this.isInterfaceOpen?"block":"none"}),this.interface.querySelectorAll(".pkui-submit")[0].addEventListener("click",t=>{t.preventDefault();const e=this.interface.querySelectorAll(".pkui-vertices")[0].value,s=this.interface.querySelectorAll(".pkui-iterations")[0].value;Number.isNaN(+e)||Number.isNaN(+s)||(this.interface.querySelectorAll(".pkui-submit")[0].disabled=!0,this.n=+e,this.iterations=+s,setTimeout(()=>{this.start(),this.interface.querySelectorAll(".pkui-submit")[0].disabled=!1},0))})});r(this,"rotate",(t,e)=>{this.nodes.forEach(s=>{const{x:o,y:n,z:i}=this.calculateRotatedCoordinates(s.x,s.y,s.z,t,e,0,.002);s.x=o,s.y=n,s.z=i}),this.render()});if(e.length<5)throw new Error("id must be at least five characters");this.n=Math.floor(Math.random()*20),this.iterations=1e4,t.innerHTML=t.innerHTML+`
      <div class="point-pack-container" id="${e}">
        <canvas class="point-pack-canvas" id="${e}-canvas"></canvas>
        <div class="point-pack-user-interface-container" id="${e}-interface">
          <button class="point-pack-toggle-user-interface">Show/Hide</button>
          <form class="pkui-display">
            <div>
              <p>Vertices:</p>
              <input class="pkui-input pkui-vertices" type="text" placeholder="vertex count..." value="${this.n}"></input>
            </div>
            <div>
              <p>Iterations:</p>
              <input class="pkui-input pkui-iterations" type="text" placeholder="iteration count..." value="${this.iterations}"></input>
            </div>
            <div>
              <input class="pkui-submit" type="submit" value="Start"></input>
            </div>
          </form>
        </div>
      </div>
    `,this.canvas=document.querySelector("#"+e+"-canvas"),this.interface=document.querySelector("#"+e+"-interface"),this.width=1e3,this.height=1e3,this.centerX=this.width/2,this.centerY=this.height/2,this.sphereRadius=470,this.canvas.width=this.width,this.canvas.height=this.height,this.ctx=this.canvas.getContext("2d"),this.mouseIsDown=!1,this.isInterfaceOpen=!0,this.isLoading=!1,this.options={clear:"black",pointColor:"#d90000",backPointColor:"#590000",edgeColor:"#dddddd",edgeBackColor:"#555555",edgeWidth:4,pointSize:8},this.nodes=[],this.generateEventListeners(),this.start()}}new S(document.querySelector("#app"),"point-pack-1");
